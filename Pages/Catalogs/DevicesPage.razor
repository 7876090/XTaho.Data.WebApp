@page "/catalogs/devices"
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity;
@using XTaho.Data.WebApp.Models.Catalogs;
@using XTaho.Data.WebApp.Models.DataSets;
@using XTaho.Data.WebApp.Services;
@using XTaho.Data.WebApp.DataAccess.PostgreSql;
@using XTaho.Data.WebApp.Components;

@inject DevicesService DService;
@inject DeviceModelsService DMService;
@inject OnlineClientService OService;

<div class="page">
    <div class="page__caption">
        <h4>Устройства системы</h4>
    </div>
    <div class="btn-toolbar" role="toolbar">
        <div class="btn-group" role="group">
            @if (userPermissions.CRUDs != null)
            {
                @if (userPermissions.CRUDs.Find(c => (c.ModelName == modelName & c.CanCreate)) != null)
                {
                    <ButtonAdd OnClickCallback="@btnAddItemOnclick" />
                }
            }
        </div>
    </div>
    <table class="table caption-top">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">#</th>
                @*<th scope="col">Наименование</th>*@
                <th scope="col">Серийный №</th>
                <th scope="col">Модель</th>
                <th scope="col">Владелец</th>
                <th scope="col">Гос № ТС</th>
                <th scope="col">Версия ПО</th>
                <th scope="col">Дата обновления ПО</th>
                <th scope="col">Описание</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in devices)
            {
                <tr class=@(item.IsDeleted ? "tr deletion-mark" : "tr")>
                    @if (userPermissions.CRUDs != null)
                    {
                        @if (userPermissions.CRUDs.Find(c => (c.ModelName == modelName & c.CanUpdate)) != null)
                        {
                            <td><ButtonEdit IsDeleted=item.IsDeleted OnClickCallback="@btnEditItemOnClick" Item="@item" /></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    else
                    {
                        <td></td>
                    }
                    <td>@item.Id</td>
                    @*<td>@item.Name</td>*@
                    <td>@item.SerialNumber</td>
                    <td>@item.ModelName</td>
                    <td>@item.MemberName</td>
                    <td>@item.VehicleRegistrationNumber</td>
                    <td>@item.FirmwareVersion</td>
                    <td>@item.FirmwareUpdateDate</td>
                    <td>@item.Description</td>
                    @if (userPermissions.CRUDs != null)
                    {
                        @if (userPermissions.CRUDs.Find(c => (c.ModelName == modelName & c.CanDelete)) != null)
                        {
                            <td><ButtonSetDeletionMark Item="@item" OnClickCallback="@btnSetDeletionMark" /></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    else
                    {
                        <td></td>
                    }
                    @if(item.RegisteredOnline)
                    {
                        <td><button type="button" class="btn btn-info" disabled>Р</button></td>
                    }
                    else
                    {
                        <td><button type="button" class="btn btn-outline-info" @onclick="(() => btnRegisterOnline(item))">Р</button></td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Модель устройства @(isNewItem ? "" : "#" + currentItem.Id) </h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="row-1" @onsubmit="btnSaveItemOnClick">
                    <div class="col">
                        <label for="name" class="form-label">Наименование</label>
                        <input type="text" class="form-control" id="name" placeholder="введите наименование (обязательно)" @bind="currentItem.Name" required>
                    </div>
                    <div class="col">
                        <label for="number" class="form-label">Серийный номер</label>
                        <input type="text" class="form-control" id="number" placeholder="0010000000/01 01/01/FF" @bind="currentItem.SerialNumber" required>
                    </div>
                    <div class="col">
                        <label for="model" class="form-label">Модель устройства</label>
                        <select class="form-select" id="model" @onchange="selectModelOnChange">
                            @foreach(var model in models)
                            {
                                if (currentItem.ModelId == model.Id)
                                {
                                    <option value="@model.Id" selected>@model.Name</option>
                                }
                                else
                                {
                                    <option value="@model.Id">@model.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <label for="member" class="form-label" >Владелец</label>
                        <select class="form-select" id="member" @onchange="selectMemberOnChange">
                            @foreach (var member in members)
                            {
                                if (currentItem.MemberId == member.Id)
                                {
                                    <option value="@member.Id" selected>@member.Name</option>
                                }
                                else
                                {
                                    <option value="@member.Id">@member.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <label for="regnumber" class="form-label">Регистрационный номер ТС</label>
                        <input type="text" class="form-control" id="regnumber" placeholder="рег. номер тс (необязательно)" @bind="currentItem.VehicleRegistrationNumber">
                    </div>
                    <div class="col">
                        <label for="firmwareVersion" class="form-label">Версия ПО</label>
                        <input type="text" class="form-control" id="firmwareVersion" placeholder="версия прошивки(необязательно)" @bind="currentItem.FirmwareVersion">
                    </div>
                    <div class="col">
                        <label for="firmwareUpdateDate" class="form-label">Дата обновления ПО</label>
                        <input type="date" class="form-control" id="firmwareUpdateDate" placeholder="дата обновления прошивки(необязательно)" @bind="currentItem.FirmwareUpdateDate">
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Описание</label>
                        <textarea class="form-control" id="description" placeholder="введите описание устройства (необязательно)" rows="3" @bind="currentItem.Description"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Закрыть</button>
                        <button type="submit" class="btn btn-outline-success">Сохранить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<Toast ToastClassList="@toastClassList" ErrorDescription="@errorDescription" />

@code {
    private string modelName = "nsi_devices";
    private List<DeviceModelsModel> models = new List<DeviceModelsModel>();
    private List<DeviceModel> devices = new List<DeviceModel>();
    private List<MemberModel> members = new List<MemberModel>();
    private DeviceModel currentItem = new DeviceModel();
    private bool isNewItem = true;
    private string errorDescription = "";
    private string toastClassList = "toast fade";
    private UserPermissionsDataSet userPermissions = new UserPermissionsDataSet();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Inject]
    UserManager<IdentityUser>? userManager { get; set; }


    private void resetError()
    {
        errorDescription = "";
        toastClassList = "toast fade";
    }

    private void setError(string eDescription)
    {
        errorDescription = eDescription;
        toastClassList = "toast fade show border-danger border-4";
    }

    private void setNoError()
    {
        errorDescription = "";
        toastClassList = "toast fade show border-success border-3";
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            var currenUser = await userManager.GetUserAsync(user);
            var userId = currenUser.Id;

            var result = await userPermissions.Init(currenUser, user.IsInRole("Operator"));
            if(result.Success)
            {
                await UpdateDevices();
            }
            else
            {
                setError(result.ErrorDescription ?? "Ошибка!");
            }
        }        
    }

    private async Task<bool> UpdateDevices()
    {
        bool updateResult = true;
        QueryResult<DeviceModel> result = await DService.GetDevicesListAsync(userPermissions.MembersString);
        if (result.Success)
        {
            devices = result.Collection ?? new List<DeviceModel>();
            members = userPermissions.Members;
            members.Insert(0, new MemberModel() { Name = "Выберите владельца" });
        }
        else
        {
            updateResult = false;
            setError(result.ErrorDescription ?? "Ошибка!");
        }
        QueryResult<DeviceModelsModel> modelsResult = await DMService.GetDeviceModelsListAsync();
        if (modelsResult.Success)
        {
            models = modelsResult.Collection ?? new List<DeviceModelsModel>();
            models.Insert(0, new DeviceModelsModel() { Name = "Выберите модель" });
        }
        else
        {
            updateResult = false;
            setError(modelsResult.ErrorDescription ?? "Ошибка!");
        }
        //QueryResult<MemberModel> membersResult = await MService.GetMembersListAsync();
        //if (membersResult.Success)
        //{
        //    members = membersResult.Collection ?? new List<MemberModel>();
        //    members.Insert(0, new MemberModel() { Name = "Выберите владельца" });
        //}
        //else
        //{
        //    updateResult = false;
        //    setError(membersResult.ErrorDescription ?? "Ошибка!");
        //}
        return updateResult;
    }

    private void btnAddItemOnclick()
    {
        resetError();
        currentItem = new DeviceModel();
        isNewItem = true;
    }

    private void btnEditItemOnClick(object item)
    {
        resetError();
        currentItem = (DeviceModel)item;
        isNewItem = false;
    }

    private async Task btnSetDeletionMark(object item)
    {
        currentItem = (DeviceModel)item;
        bool currentStage = currentItem.IsDeleted;
        currentItem.IsDeleted = !currentItem.IsDeleted;
        ExecuteResult result = await DService.UpdateDeviceAsync(currentItem);
        if (result.Success) { }
        else
        {
            currentItem.IsDeleted = currentStage;
        }
    }

    private async Task btnRegisterOnline(DeviceModel item)
    {
        var serialNumber = item.SerialNumber ?? "";
        var res = await OService.RegisterDevice(serialNumber);
        if (res)
        {
            currentItem = item;
            currentItem.RegisteredOnline = true;
            ExecuteResult result = await DService.UpdateDeviceAsync(currentItem);
            if (result.Success) { }
            else
            {
                setError("Ошибка реистрации утсройства!");
            }
        }
    }

    private async Task btnCloseItemOnClick()
    {
        resetError();
    }

    private async Task btnSaveItemOnClick()
    {
        resetError();
        ExecuteResult result;
        if (isNewItem)
        {
            result = await DService.AddDeviceAsync(currentItem);
        }
        else
        {
            result = await DService.UpdateDeviceAsync(currentItem);
        }
        if (result.Success)
        {
            setNoError();
            await UpdateDevices();
        }
        else
        {
            setError(result.ErrorDescription ?? "Ошибка!");
        }        
    }

    private void selectModelOnChange(ChangeEventArgs e)
    {
        int selectedModelId = int.Parse(e.Value.ToString());
        bool selected = false;
        foreach (var item in models)
        {
            if (item.Id == selectedModelId)
            {
                currentItem.ModelId = selectedModelId;
                currentItem.ModelName= item.Name;
                selected = true;
                break;
            }
        }
        if (!selected)
        {
            currentItem.ModelId = 0;
            currentItem.ModelName= "Не выбрана";
        }
    }

    private void selectMemberOnChange(ChangeEventArgs e)
    {
        int selectedMemberId = int.Parse(e.Value.ToString());
        bool selected = false;
        foreach(var item in members)
        {
            if(item.Id == selectedMemberId)
            {
                currentItem.MemberId = selectedMemberId;
                currentItem.MemberName = item.Name;
                selected = true;
                break;
            }
        }
        if(!selected)
        {
            currentItem.MemberId = 0;
            currentItem.MemberName = "Не выбран";
        }
    }
}