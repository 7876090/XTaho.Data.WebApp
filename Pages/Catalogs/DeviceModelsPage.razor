@page "/catalogs/devicemodels"

@using XTaho.Data.WebApp.Models.Catalogs;
@using XTaho.Data.WebApp.Services;
@using XTaho.Data.WebApp.DataAccess.PostgreSql;
@using XTaho.Data.WebApp.Models.DataSets;

@inject DeviceModelsService DMService;


<div class="page">
    <div class="page__caption">
        <h4>Модели устройств</h4>
    </div>
    <div class="btn-toolbar" role="toolbar">
        <div class="btn-group" role="group">
            <button class="btn btn-outline-success" @onclick="btnAddItemOnclick" data-bs-toggle="modal" data-bs-target="#staticBackdrop">Добавить</button>
        </div>
    </div>
    <table class="table caption-top">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">#</th>
                <th scope="col">Наименование</th>
                <th scope="col">Номер</th>
                <th scope="col">Рег. номер</th>
                <th scope="col">Описание</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in models)
            {
                <tr class=@(item.IsDeleted ? "tr deletion-mark" : "tr")>
                  @*  <td><a class=@(item.IsDeleted ? "btn__link hidden" : "btn__link") @onclick="@(() => btnEditItemOnClick(item))" data-bs-toggle="modal" data-bs-target="#staticBackdrop"><img src="src/img/btn/edit.svg" /></a></td>*@
                    <td><XTaho.Data.WebApp.Components.ButtonEdit IsDeleted=item.IsDeleted OnClickCallback="@btnEditItemOnClick" Item="@item" /></td>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Number</td>
                    <td>@item.RegistrationNumber</td>
                    <td>@item.Description</td>
                    <td><a class="btn__link" @onclick="@(() => btnSetDeletionMark(item))"><img src="src/img/btn/delete.svg" /></a></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Модель устройства @(isNewItem ? "" : "#" + currentItem.Id) </h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="row-1" @onsubmit="btnSaveItemOnClick">
                    <div class="col">
                        <label for="name" class="form-label">Наименование</label>
                        <input type="text" class="form-control" id="name" placeholder="введите наименование (обязательно)" @bind="currentItem.Name" required>
                    </div>
                    <div class="col">
                        <label for="number" class="form-label">Номер модели</label>
                        <input type="text" class="form-control" id="number" placeholder="номер модели (обязательно)" @bind="currentItem.Number" required>
                    </div>
                    <div class="col">
                        <label for="regnumber" class="form-label">Регистрационный номер </label>
                        <input type="text" class="form-control" id="regnumber" placeholder="рег. номер (обязательно)" @bind="currentItem.RegistrationNumber" required>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Описание</label>
                        <textarea class="form-control" id="description" placeholder="введите описание модели (необязательно)" rows="3" @bind="currentItem.Description"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Закрыть</button>
                        <button type="submit" class="btn btn-outline-success">Сохранить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class=@toastClassList role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@(string.IsNullOrEmpty(errorDescription) ? "Ошибок нет!" : "Внимание!")</strong>
            @*<small>11 mins ago</small>*@
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            @(string.IsNullOrEmpty(errorDescription) ? "Данные записаны" : errorDescription)
        </div>
    </div>
</div>

@code {
    private List<DeviceModelsModel> models = new List<DeviceModelsModel>();
    private DeviceModelsModel currentItem = new DeviceModelsModel();
    private bool isNewItem = true;
    private string errorDescription = "";
    private string toastClassList = "toast fade";
    private UserPermissionsDataSet userPermissions = new UserPermissionsDataSet();

    private void resetError()
    {
        errorDescription = "";
        toastClassList = "toast fade";
    }

    private void setError(string eDescription)
    {
        errorDescription = eDescription;
        toastClassList = "toast fade show border-danger border-4";
    }

    private void setNoError()
    {
        errorDescription = "";
        toastClassList = "toast fade show border-success border-3";
    }

    protected override async Task OnInitializedAsync()
    {
        userPermissions.Init();
        await UpdateModels();
    }

    private async Task UpdateModels()
    {
        QueryResult<DeviceModelsModel> result = await DMService.GetDeviceModelsListAsync();
        if (result.Success)
        {
            models = result.Collection ?? new List<DeviceModelsModel>();
        }
    }

    private void btnAddItemOnclick()
    {
        resetError();
        currentItem = new DeviceModelsModel();
        isNewItem = true;
    }

    private void btnEditItemOnClick(object item)
    {
        resetError();
        currentItem = (DeviceModelsModel)item;
        isNewItem = false;
    }

    private async Task btnSetDeletionMark(DeviceModelsModel item)
    {
        bool currentStage = item.IsDeleted;
        item.IsDeleted = !item.IsDeleted;
        ExecuteResult result = await DMService.UpdateModelAsync(item);
        if (result.Success) { }
        else
        {
            item.IsDeleted = currentStage;
        }
    }

    private async Task btnSaveItemOnClick()
    {
        resetError();
        ExecuteResult result;
        if (isNewItem)
        {
            result = await DMService.AddModelAsync(currentItem);
        }
        else
        {
            result = await DMService .UpdateModelAsync(currentItem);
        }
        if (result.Success)
        {
            setNoError();
            await UpdateModels();
        }
        else
        {
            setError(result.ErrorDescription ?? "Ошибка!");
        }
    }
}