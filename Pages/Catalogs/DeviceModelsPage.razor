@page "/catalogs/devicemodels"

@using Microsoft.AspNetCore.Identity;
@using XTaho.Data.WebApp.Components;
@using XTaho.Data.WebApp.Models.Catalogs;
@using XTaho.Data.WebApp.Services;
@using XTaho.Data.WebApp.DataAccess.PostgreSql;
@using XTaho.Data.WebApp.Models.DataSets;

@inject DeviceModelsService DMService;

<div class="page">
    <div class="page__caption">
        <h4>Модели устройств</h4>
    </div>
    <div class="btn-toolbar" role="toolbar">
        <div class="btn-group" role="group">
            @if (userPermissions.CRUDs != null)
            {
                @if (userPermissions.CRUDs.Find(c => (c.ModelName == modelName & c.CanCreate)) != null)
                {
                    <ButtonAdd OnClickCallback="@btnAddItemOnclick" />
                }
            }
        </div>
    </div>
    <table class="table caption-top">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">#</th>
                <th scope="col">Наименование</th>
                <th scope="col">Номер</th>
                <th scope="col">Рег. номер</th>
                <th scope="col">Описание</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in models)
            {
                <tr class=@(item.IsDeleted ? "tr deletion-mark" : "tr")>
                    @if (userPermissions.CRUDs != null)
                    {
                        @if (userPermissions.CRUDs.Find(c => (c.ModelName == modelName & c.CanUpdate)) != null)
                        {
                            <td><ButtonEdit IsDeleted=item.IsDeleted OnClickCallback="@btnEditItemOnClick" Item="@item" /></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    else
                    {
                        <td></td>
                    }
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Number</td>
                    <td>@item.RegistrationNumber</td>
                    <td>@item.Description</td>
                    @if (userPermissions.CRUDs != null)
                    {
                        @if (userPermissions.CRUDs.Find(c => (c.ModelName == modelName & c.CanDelete)) != null)
                        {
                            <td><ButtonSetDeletionMark Item="@item" OnClickCallback="@btnSetDeletionMark" /></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    else
                    {
                        <td></td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Модель устройства @(isNewItem ? "" : "#" + currentItem.Id) </h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="row-1" @onsubmit="btnSaveItemOnClick">
                    <div class="col">
                        <label for="name" class="form-label">Наименование</label>
                        <input type="text" class="form-control" id="name" placeholder="введите наименование (обязательно)" @bind="currentItem.Name" required>
                    </div>
                    <div class="col">
                        <label for="number" class="form-label">Номер модели</label>
                        <input type="text" class="form-control" id="number" placeholder="номер модели (обязательно)" @bind="currentItem.Number" required>
                    </div>
                    <div class="col">
                        <label for="regnumber" class="form-label">Регистрационный номер </label>
                        <input type="text" class="form-control" id="regnumber" placeholder="рег. номер (обязательно)" @bind="currentItem.RegistrationNumber" required>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Описание</label>
                        <textarea class="form-control" id="description" placeholder="введите описание модели (необязательно)" rows="3" @bind="currentItem.Description"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Закрыть</button>
                        <button type="submit" class="btn btn-outline-success">Сохранить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<Toast ToastClassList="@toastClassList" ErrorDescription="@errorDescription" />

@code {
    private string modelName = "nsi_devicemodels";
    private List<DeviceModelsModel> models = new List<DeviceModelsModel>();
    private DeviceModelsModel currentItem = new DeviceModelsModel();
    private bool isNewItem = true;
    private string errorDescription = "";
    private string toastClassList = "toast fade";
    private UserPermissionsDataSet userPermissions = new UserPermissionsDataSet();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }

    private void resetError()
    {
        errorDescription = "";
        toastClassList = "toast fade";
    }

    private void setError(string eDescription)
    {
        errorDescription = eDescription;
        toastClassList = "toast fade show border-danger border-4";
    }

    private void setNoError()
    {
        errorDescription = "";
        toastClassList = "toast fade show border-success border-3";
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            var currenUser = await userManager.GetUserAsync(user);
            var userId = currenUser.Id;

            var result = await userPermissions.Init(currenUser, user.IsInRole("Operator"));
            if (result.Success)
            {                
            }
            else
            {
                setError(result.ErrorDescription ?? "Ошибка!");
            }
        }
        await UpdateModels();
    }

    private async Task UpdateModels()
    {
        QueryResult<DeviceModelsModel> result = await DMService.GetDeviceModelsListAsync();
        if (result.Success)
        {
            models = result.Collection ?? new List<DeviceModelsModel>();
        }
    }

    private void btnAddItemOnclick()
    {
        resetError();
        currentItem = new DeviceModelsModel();
        isNewItem = true;
    }

    private void btnEditItemOnClick(object item)
    {
        resetError();
        currentItem = (DeviceModelsModel)item;
        isNewItem = false;
    }

    private async Task btnSetDeletionMark(object item)
    {
        currentItem = (DeviceModelsModel)item;
        bool currentStage = currentItem.IsDeleted;
        currentItem.IsDeleted = !currentItem.IsDeleted;
        ExecuteResult result = await DMService.UpdateModelAsync(currentItem);
        if (result.Success) { }
        else
        {
            currentItem.IsDeleted = currentStage;
        }
    }

    private async Task btnSaveItemOnClick()
    {
        resetError();
        ExecuteResult result;
        if (isNewItem)
        {
            result = await DMService.AddModelAsync(currentItem);
        }
        else
        {
            result = await DMService .UpdateModelAsync(currentItem);
        }
        if (result.Success)
        {
            setNoError();
            await UpdateModels();
        }
        else
        {
            setError(result.ErrorDescription ?? "Ошибка!");
        }
    }
}