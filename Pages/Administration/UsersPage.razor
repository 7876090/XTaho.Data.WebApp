@page "/administration/users"

@using XTaho.Data.WebApp.Models.Catalogs;
@using XTaho.Data.WebApp.Models.Access;
@using XTaho.Data.WebApp.Models.DataSets;
@using XTaho.Data.WebApp.Services;
@using XTaho.Data.WebApp.DataAccess.PostgreSql;

@inject MembersUsersService MUService;
@inject MembersService MService;
@inject RolesService RService;

<div class="page">
    <div class="page__caption">
        <h4>Пользователи системы</h4>
    </div>
    <div class="btn-toolbar" role="toolbar">
        <div class="btn-group" role="group">
            <button class="btn btn-outline-success" @onclick="btnAddItemOnclick" data-bs-toggle="modal" data-bs-target="#staticBackdrop">Добавить</button>
        </div>
    </div>
    <table class="table caption-top">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">#</th>
                <th scope="col">Имя</th>
                <th scope="col">Участник системы</th>
                <th scope="col">Описание</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in users)
            {
                <tr class=@(item.IsDeleted ? "tr deletion-mark" : "tr")>
                    <td><a class=@(item.IsDeleted ? "btn__link hidden" : "btn__link") @onclick="@(() => btnEditItemOnClick(item))" data-bs-toggle="modal" data-bs-target="#staticBackdrop"><img src="src/img/btn/edit.svg" /></a></td>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.MemberName</td>
                    <td>@item.Description</td>
                    <td><button class="btn btn-outline-warning oi oi-dashboard" @onclick="@(() => btnEditRolesOnClick(item))" data-bs-toggle="modal" data-bs-target="#staticBackdropObjects"></button></td>
                    <td><a class="btn__link" @onclick="@(() => btnSetDeletionMark(item))"><img src="src/img/btn/delete.svg" /></a></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Пользователь@(isNewItem ? "" : "#" + currentItem.Name) </h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="row-1" @onsubmit="btnSaveItemOnClick">
                    <div class="col">
                        <label for="name" class="form-label">Имя</label>
                        <input type="text" class="form-control" id="name" placeholder="введите наименование (обязательно)" @bind="currentItem.Name" required>
                    </div>
                    <div class="col">
                        <label for="user" class="form-label">Пользователь</label>
                        <select class="form-select" id="user" @onchange="selectUserOnChange">
                            @foreach (var user in identityUsers)
                            {
                                if (currentItem.UserId == user.Id)
                                {
                                    <option value="@user.Id" selected>@user.UserName</option>
                                }
                                else
                                {
                                    <option value="@user.Id">@user.UserName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <label for="member" class="form-label">Участник системы</label>
                        <select class="form-select" id="member" @onchange="selectMemberOnChange">
                            @foreach (var member in members)
                            {
                                if (currentItem.MemberId == member.Id)
                                {
                                    <option value="@member.Id" selected>@member.Name</option>
                                }
                                else
                                {
                                    <option value="@member.Id">@member.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Описание</label>
                        <textarea class="form-control" id="description" placeholder="введите описание пользователя (необязательно)" rows="3" @bind="currentItem.Description"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Закрыть</button>
                        <button type="submit" class="btn btn-outline-success">Сохранить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="staticBackdropObjects" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropObjectsLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropObjectLabel">Объекты доступа @(currentItem.Name)</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Наименование</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in userRoles)
                    {
                        <tr>
                            <td>@item.NormalizedName</td>
                            @if (item.IsActive)
                            {
                                <td>
                                    <button class="btn btn-outline-success oi oi-circle-check" @onclick="(() => btnIsRoleActiveOnClick(item))">
                                        <!--активен -->
                                    </button>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <button class="btn btn-outline-danger oi oi-circle-x" @onclick="(() => btnIsRoleActiveOnClick(item))">
                                        <!--активен -->
                                    </button>
                                </td>
                            } 
                        </tr>
                    }
                </tbody>
            </table>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Закрыть</button>
                <button type="button" class="btn btn-outline-success" @onclick=btnSaveRolesOnClick>Сохранить</button>
            </div>
        </div>
    </div>
</div>




<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class=@toastClassList role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@(string.IsNullOrEmpty(errorDescription) ? "Ошибок нет!" : "Внимание!")</strong>
            @*<small>11 mins ago</small>*@
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            @(string.IsNullOrEmpty(errorDescription) ? "Данные записаны" : errorDescription)
        </div>
    </div>
</div>

@code {
    private List<IdentityUserDataSet> identityUsers = new List<IdentityUserDataSet>();
    private List<MembersUsersModel> users = new List<MembersUsersModel>();
    private List<MemberModel> members = new List<MemberModel>();
    private MembersUsersModel currentItem = new MembersUsersModel();
    private List<IdentityUserRolesDataSet> userRoles = new List<IdentityUserRolesDataSet>();
    private bool isNewItem = true;
    private string errorDescription = "";
    private string toastClassList = "toast fade";

    private void resetError()
    {
        errorDescription = "";
        toastClassList = "toast fade";
    }

    private void setError(string eDescription)
    {
        errorDescription = eDescription;
        toastClassList = "toast fade show border-danger border-4";
    }

    private void setNoError()
    {
        errorDescription = "";
        toastClassList = "toast fade show border-success border-3";
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateUsers();
    }

    private async Task<bool> UpdateUsers()
    {
        bool updateResult = true;

        QueryResult<IdentityUserDataSet> iusersResult = await MUService.GetUsersListAsync();
        if (iusersResult.Success)
        {
            identityUsers = iusersResult.Collection ?? new List<IdentityUserDataSet>();
            identityUsers.Insert(0, new IdentityUserDataSet(){ UserName = "Выберите пользователя"});
        }
        else
        {
            updateResult = false;
            setError(iusersResult.ErrorDescription ?? "Ошибка!");
        }

        QueryResult<MembersUsersModel> usersResult = await MUService.GetMembersUsersListAsync();
        if (usersResult.Success)
        {
            users = usersResult.Collection ?? new List<MembersUsersModel>();
        }
        else
        {
            updateResult = false;
            setError(usersResult.ErrorDescription ?? "Ошибка!");
        }
        QueryResult<MemberModel> membersResult = await MService.GetMembersListAsync();
        if (membersResult.Success)
        {
            members = membersResult.Collection ?? new List<MemberModel>();
            members.Insert(0, new MemberModel() { Name = "Выберите участника" });
        }
        else
        {
            updateResult = false;
            setError(membersResult.ErrorDescription ?? "Ошибка!");
        }
        return updateResult;
    }

    private void btnAddItemOnclick()
    {
        resetError();
        currentItem = new MembersUsersModel();
        isNewItem = true;
    }

    private void btnEditItemOnClick(MembersUsersModel item)
    {
        resetError();
        currentItem = item;
        isNewItem = false;
    }

    private async Task btnSetDeletionMark(MembersUsersModel item)
    {
        bool currentStage = item.IsDeleted;
        item.IsDeleted = !item.IsDeleted;
        ExecuteResult result = await MUService.UpdateMemberUserAsync(item);
        if (result.Success) { }
        else
        {
            item.IsDeleted = currentStage;
        }
    }

    private void btnCloseItemOnClick()
    {
        resetError();
    }

    private async Task btnSaveItemOnClick()
    {
        resetError();
        ExecuteResult result;
        if (isNewItem)
        {
            result = await MUService.AddMemberUserAsync(currentItem);
        }
        else
        {
            result = await MUService.UpdateMemberUserAsync(currentItem);
        }
        if (result.Success)
        {
            setNoError();
            await UpdateUsers();
        }
        else
        {
            setError(result.ErrorDescription ?? "Ошибка!");
        }
    }

    private void selectUserOnChange(ChangeEventArgs e)
    {
        string selectedUserId = e.Value.ToString();
        bool selected = false;
        foreach (var item in identityUsers)
        {
            if (item.Id == selectedUserId)
            {
                currentItem.UserId = selectedUserId;
                currentItem.UserName = item.UserName;
                selected = true;
                break;
            }
        }
        if (!selected)
        {
            currentItem.UserId = selectedUserId;
            currentItem.UserName = "Не выбран";
        }
    }

    private void selectMemberOnChange(ChangeEventArgs e)
    {
        int selectedMemberId = int.Parse(e.Value.ToString());
        bool selected = false;
        foreach (var item in members)
        {
            if (item.Id == selectedMemberId)
            {
                currentItem.MemberId = selectedMemberId;
                currentItem.MemberName = item.Name;
                selected = true;
                break;
            }
        }
        if (!selected)
        {
            currentItem.MemberId = 0;
            currentItem.MemberName = "Не выбран";
        }
    }

    private async Task btnEditRolesOnClick(MembersUsersModel item)
    {
        resetError();
        currentItem = item;
        isNewItem = true;
        QueryResult<IdentityUserRolesDataSet> result = await RService.GetRolesListAsync(item.UserId);
        if (result.Success)
        {
            userRoles = result.Collection ?? new List<IdentityUserRolesDataSet>();
            //CRUDPermissions = result.Collection ?? new List<CRUD>();
            //if (CRUDPermissions.Count() > 0)
            //{
            //    isNewItem = CRUDPermissions[0].RoleId == null ? true : false;
            //}
        }
        else
        {
            setError(result.ErrorDescription ?? "Ошибка!");
        }
    }   

    private void btnIsRoleActiveOnClick(IdentityUserRolesDataSet item)
    {
        item.IsActive = !item.IsActive;
    }

    private async Task btnSaveRolesOnClick()
    {
        resetError();
        ExecuteResult result;
        //if (isNewItem)
        //{
        //    result = result = await RService.AddCRUDPermissionsAsync(CRUDPermissions, currentItem.Id);
        //}
        //else
        //{
        //    result = await RService.UpdateCRUDPermissionsAsync(CRUDPermissions, currentItem.Id);
        //}
        //if (result.Success)
        //{
        //    isNewItem = false;
        //    setNoError();
        //    await UpdateRoles();
        //}
        //else
        //{
        //    setError(result.ErrorDescription ?? "Ошибка!");
        //}
    }
}
